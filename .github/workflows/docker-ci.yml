name: CI/CD - dev

on:
  push:
    branches: ["dev"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-dev
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 시크릿 필수
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:dev-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 20
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}     
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}   # 키 파일 전문(-----BEGIN ~ END-----)
          script: |
            set -euo pipefail

            # Docker 데몬 보장 + 기본 유틸 보장
            sudo systemctl enable --now docker
            command -v curl >/dev/null 2>&1 || sudo dnf -y install curl

            # .env 존재 확인 (없으면 바로 실패)
            [ -f /home/ec2-user/.env ] || { echo "ERROR: /home/ec2-user/.env not found"; exit 1; }

            # ★ .env 자동 교정: DB_URL은 컨테이너 DB(vroom-db)로 강제
            sed -i 's|^DB_URL=.*|DB_URL=jdbc:postgresql://vroom-db:5432/vroomvroom|' /home/ec2-user/.env

            # .env에서 DB_PASSWORD 읽기
            APP_DB_PASS=$(grep -m1 '^DB_PASSWORD=' /home/ec2-user/.env | cut -d'=' -f2- | tr -d '\r')
            [ -n "${APP_DB_PASS}" ] || { echo "ERROR: DB_PASSWORD not set in /home/ec2-user/.env"; exit 1; }

            # Docker Hub 로그인
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login \
              -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # 앱-DB 네트워크 보장
            sudo docker network inspect vroom-net >/dev/null 2>&1 || sudo docker network create vroom-net

            # DB(PostGIS) 컨테이너 보장
            #    - 처음 생성이면 .env의 비번으로 초기화
            #    - 볼륨(pgdata) 이미 있으면 초기 PASSWORD는 무시 → 아래 ALTER USER로 동기화
            if ! sudo docker ps -a --format '{{.Names}}' | grep -qx vroom-db; then
              sudo docker run -d --name vroom-db --network vroom-net \
                -e POSTGRES_DB=vroomvroom \
                -e POSTGRES_USER=postgres \
                -e POSTGRES_PASSWORD="${APP_DB_PASS}" \
                -v pgdata:/var/lib/postgresql/data \
                --restart unless-stopped \
                postgis/postgis:17-3.4
            else
              sudo docker start vroom-db || true
            fi

            # DB 준비 대기 + PostGIS 확장 보장
            until sudo docker exec vroom-db pg_isready -U postgres -d vroomvroom >/dev/null 2>&1; do
              echo "waiting for postgres..."; sleep 1
            done
            sudo docker exec -u postgres vroom-db psql -d vroomvroom -c "CREATE EXTENSION IF NOT EXISTS postgis;"

            # ★ DB 슈퍼유저 비밀번호를 .env 값으로 항상 동기화
            sudo docker exec -u postgres vroom-db \
              psql -d postgres -v pass="${APP_DB_PASS}" -c "ALTER USER postgres WITH PASSWORD :'pass';"

            # 앱 컨테이너 배포
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:dev-latest
            sudo docker rm -f vroom-vroom || true
            sudo docker run -d --name vroom-vroom --network vroom-net \
              -p 80:8080 \
              --env-file /home/ec2-user/.env \
              --restart unless-stopped \
              ${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:dev-latest

            # 헬스 체크(최대 30초): 200/404/401 등 응답 오면 OK
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost || true)
              if [ "$code" = "200" ] || [ "$code" = "404" ] || [ "$code" = "401" ]; then
                echo "App ready (HTTP $code)"; break
              fi
              sleep 1
            done

            # 상태 출력
            sudo docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"
