name: CI/CD - dev

on:
  push:
    branches: ["dev"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-dev
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:dev-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            sudo systemctl enable --now docker

            # Docker Hub 로그인
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login \
              -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # 네트워크/DB 보장
            sudo docker network inspect vroom-net >/dev/null 2>&1 || sudo docker network create vroom-net

            if ! sudo docker ps -a --format '{{.Names}}' | grep -qx vroom-db; then
              sudo docker run -d --name vroom-db --network vroom-net \
                -e POSTGRES_DB=vroomvroom \
                -e POSTGRES_USER=postgres \
                -e POSTGRES_PASSWORD=secret \
                -v pgdata:/var/lib/postgresql/data \
                --restart unless-stopped \
                postgis/postgis:17-3.4

              # DB 준비 대기 + PostGIS 확장
              until sudo docker exec vroom-db pg_isready -U postgres -d vroomvroom >/dev/null 2>&1; do
                echo "waiting for postgres..."; sleep 1
              done
              sudo docker exec -u postgres vroom-db psql -d vroomvroom -c "CREATE EXTENSION IF NOT EXISTS postgis;"
            else
              sudo docker start vroom-db || true
            fi

            # 앱 배포
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:dev-latest
            sudo docker rm -f vroom-vroom || true
            sudo docker run -d --name vroom-vroom --network vroom-net \
              -p 80:8080 \
              --env-file /home/ec2-user/.env \
              --restart unless-stopped \
              ${{ secrets.DOCKERHUB_USERNAME }}/vroom-vroom:dev-latest

            # 헬스 체크
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost || true)
              if [ "$code" = "200" ] || [ "$code" = "404" ] || [ "$code" = "401" ]; then
                echo "App ready (HTTP $code)"; break
              fi
              sleep 1
            done

            sudo docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"
